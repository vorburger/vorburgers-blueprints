
* JMI

* interface generation 0.1

* perf. test index-based vs. holding a reflection.Method
* best perf. would be if *Impl had an Object[] and dyn used index-based into that and gen. e.g. String getName() { return (String) fields[3] }

* impl generation 0.1

* all gen. interfaces should extends Object (or something else) - they can be used dynamically as well!

* in-memory compilation of impl

* handle ID class, can't mix! E.g. subtypes.

* handle reverseness!!

* create in-memory meta-model from (may be slightly annotated) interface definitions

* on the fly changes to the metamodel - add fields or even remove - existing instances should remain valid

* these should be code syntax style gen options (ONLY RELEVANT IF GEN CODE - AS LONG AS INVISIBLE INTERNAL, NOT RELEVANT)
** modern getter and setters or classical getters and setters
** setter chaining  

* these behaviour options (RELEVANT EVEN IF PURE dyn and no code gen!)
** nulll interfaces and implementation classes should be an OPTION (which for meta I want) - on by default, but not everybody may like it
*** choice could be made per Type/Class.. add it to the meta as a mixin, not just an generator option! 

* support gen. code alternative to current Nullable.. the Scala-like Option approach, also see e.g. http://msdn.microsoft.com/en-us/library/1t3y8s4s.aspx

** find out if FindBugs annotations @NonNull & CheckForNull are actuallyuseful, and add them! (http://findbugs.sourceforge.net/manual/annotations.html)
*** https://bugs.eclipse.org/bugs/show_bug.cgi?id=186342
*** IntelliJ http://robaustin.wikidot.com/annotations-and-notnull 
*** http://www.google.ch/search?sourceid=chrome&ie=UTF-8&q=eclipse+JSR+305
*** http://groups.google.com/group/jsr-305?pli=1

* Annotations... really needed?!  isn't that a work-around because in Java classes (java.lang.Class) cannot be extended (e.g. via mix-in) - here I could!  May be remove later.

---

* define interaction metamodel; build an interactionmodel for the core metamodel, build a Web UI

* peer review? POS, SZ, DAG, CVE, KKR, YAN.  Sven & similiar?  Day David? 
  
* propose this as a JSR ?!  After peer review, if others think this could be of interest.

---

* using some Grapher tool (Eclipse's?), gen. an (auto-layouted, not an Editor) "class diagram" (showing relationships)

* Viewer could be configured tree-wise, to exploit 'parent' properties
